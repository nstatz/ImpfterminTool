from selenium import webdriverimport timeimport beepyimport sysimport datetime as dtimport os"""This Script enables to get a registration code for a corona vaccination. This registration code then will be required to get an actual appointment.Not using an API, but using Selenium instead was on purpose: A Code will not be reserved for you. This means if you are slower than someone else, you have to try again. This Script will initialize Chrome instances.If a Code was found, the Chrome window will not be closed. Instead it will remain open so you are able to interact withit. Using an API would make you lose valuable seconds in the end.The Script that actually uses the code to get an appointment used an API-Endpoint that was retrieved by trackingnetwork processes in Chrome"""# you need to have chrome installed. Chromedriver must be in the same directory as this scriptif os.name == "nt":    driver_path = ".\chromedriver.exe"driver = webdriver.Chrome("./chromedriver")#Config##############bdate = "01.01.1900"##############def request_url(url):    """    Call the website of a vaccine center in Baden Württemberg.    If a registration code was found, there will be an audio notification.    :param url: string    url of a vaccine center in Baden-Württemberg    :return: boolean    True if a registration Code was found, False if not    """    now = dt.datetime.now()    print(f"{now} Requesting url: {url}")    url = url    driver.get(url)    boxes_count = 0    while boxes_count == 0:        radio_boxes = driver.find_elements_by_xpath("//input[@type='radio' and @value='0']")        labels = driver.find_elements_by_xpath("//label[@class='ets-radio-control']")        boxes_count = len(radio_boxes)        time.sleep(1)    labels[1].click()    time.sleep(5)    # if this is found in the html-code it means a registration Code was found.    good_msg = "Überprüfen Sie mit Hilfe der landesspezifischen Webseiten, ob Sie zu einer der"    body = driver.find_elements_by_tag_name("body")[0]    if good_msg in body.text:        beepy.beep(sound=4)        return True    return False#https://github.com/iamnotturner/vaccipy/wiki/Ein-Code-fuer-mehrere-Impfzentren# this dict used groups according to the provided URL. Locations in the same group use the same registration codes.location_url_dict = \{    #Group 3:    #"Leinfelden-Echterdingen": "https://229-iz.impfterminservice.de/impftermine/service?plz=70629"    "sindelfingen" : r"https://229-iz.impfterminservice.de/impftermine/service?plz=71065",    #"Meßstetten" : r"https://229-iz.impfterminservice.de/impftermine/service?plz=72469",    #"Waiblingen" : r"https://229-iz.impfterminservice.de/impftermine/service?plz=71334",    #"Göppingen" : r"https://229-iz.impfterminservice.de/impftermine/service?plz=73037",    #Group 4:    #"ludwigsburg" : r"https://005-iz.impfterminservice.de/impftermine/service?plz=71636",    #"Altensteig-Wart" : r"https://005-iz.impfterminservice.de/impftermine/service?plz=72213",    #"Reutlingen" : r"https://005-iz.impfterminservice.de/impftermine/service?plz=72762",    #"Aalen" : r"https://005-iz.impfterminservice.de/impftermine/service?plz=73430",    #"Pforzheim" : r"https://005-iz.impfterminservice.de/impftermine/service?plz=75175",    #"Karlsruhe" : r"https://005-iz.impfterminservice.de/impftermine/service?plz=76137",    # Group 5    #"Tübingen" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=72072",    #"Ummendorf" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=88444",    #"Friedrichshafen" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=88045",    #"Baden-Baden" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=76530",    #"Dornstetteb" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=72280",    #"Ilsheim-Auenstein" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=74360",    #"Wolpertshausen" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=74549",    #"Rot am See" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=74585",    #"Öhringen" : r"https://003-iz.impfterminservice.de/impftermine/service?plz=74613",}def fill_bdate(bdate):    """    Fills out form with birthdate if a registration code was found    :param bdate: str    birthdate with format %d.%m.%Y    """    labels = driver.find_elements_by_xpath("//label[@class='ets-radio-control']")    labels[2].click()    time.sleep(1)    date_form = driver.find_element_by_xpath("//input[@type='date' and @formcontrolname='birthdate']")    date_form.send_keys(bdate)    time.sleep(1)    submit_button = driver.find_element_by_xpath("//button[@type='submit' and @class='btn kv-btn btn-magenta text-uppercase d-inline-block']")    submit_button.click()result = Falseif __name__ == "__main__":    # Check all locations for a code, until a registration code was found.    # This program was written in a quick and dirty approach. If you got a code, comment the appropriate line in the    # dictionary.    while result == False:        for key in location_url_dict.keys():            print(f"Calling function for {key}")            url = location_url_dict[key]            result = request_url(url)            if result == True:                fill_bdate(bdate)                quit()                sys.exit()        # Wait 20 seconds if no registration code was found        time.sleep(20)